// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  priceId     String       // Stripe Price ID for linking directly with Stripe
  category    String?
  stock       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relation fields
  variants    Variant[]    // Relation to Product Variants
  reviews     Review[]     // Relation to Reviews
  orderItems  OrderItem[]  // Relation to OrderItems
}

model Variant {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  size        String?
  spiciness   Int?
  priceId     String    // Stripe Price ID
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id               Int        @id @default(autoincrement())
  userId           Int?
  user             User?      @relation(fields: [userId], references: [id])
  stripeSessionId  String?    // Store Stripe session ID for payment tracking
  totalAmount      Float
  status           String     // e.g., 'PENDING', 'COMPLETED'
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  items            OrderItem[]
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id])
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float     // Price at time of purchase
  subtotal    Float     // Calculated as quantity * price
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  name        String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relation fields
  orders      Order[]
  reviews     Review[]  // Relation to Reviews
}

model Review {
  id          Int       @id @default(autoincrement())
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  rating      Int       // Example: 1 to 5 scale
  comment     String?
  createdAt   DateTime  @default(now())
}
